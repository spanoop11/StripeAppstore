// Generated by view binder compiler. Do not edit!
package com.stripe.android.cardverificationsheet.example.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.stripe.android.cardverificationsheet.example.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityLaunchCardVerificationSheetCompleteBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final EditText civId;

  @NonNull
  public final LinearLayout civIdLayout;

  @NonNull
  public final EditText civSecret;

  @NonNull
  public final LinearLayout civSecretLayout;

  @NonNull
  public final ConstraintLayout constraintLayout;

  @NonNull
  public final Button launchScanButton;

  private ActivityLaunchCardVerificationSheetCompleteBinding(@NonNull CoordinatorLayout rootView,
      @NonNull EditText civId, @NonNull LinearLayout civIdLayout, @NonNull EditText civSecret,
      @NonNull LinearLayout civSecretLayout, @NonNull ConstraintLayout constraintLayout,
      @NonNull Button launchScanButton) {
    this.rootView = rootView;
    this.civId = civId;
    this.civIdLayout = civIdLayout;
    this.civSecret = civSecret;
    this.civSecretLayout = civSecretLayout;
    this.constraintLayout = constraintLayout;
    this.launchScanButton = launchScanButton;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityLaunchCardVerificationSheetCompleteBinding inflate(
      @NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityLaunchCardVerificationSheetCompleteBinding inflate(
      @NonNull LayoutInflater inflater, @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_launch_card_verification_sheet_complete, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityLaunchCardVerificationSheetCompleteBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.civ_id;
      EditText civId = ViewBindings.findChildViewById(rootView, id);
      if (civId == null) {
        break missingId;
      }

      id = R.id.civIdLayout;
      LinearLayout civIdLayout = ViewBindings.findChildViewById(rootView, id);
      if (civIdLayout == null) {
        break missingId;
      }

      id = R.id.civ_secret;
      EditText civSecret = ViewBindings.findChildViewById(rootView, id);
      if (civSecret == null) {
        break missingId;
      }

      id = R.id.civSecretLayout;
      LinearLayout civSecretLayout = ViewBindings.findChildViewById(rootView, id);
      if (civSecretLayout == null) {
        break missingId;
      }

      id = R.id.constraintLayout;
      ConstraintLayout constraintLayout = ViewBindings.findChildViewById(rootView, id);
      if (constraintLayout == null) {
        break missingId;
      }

      id = R.id.launch_scan_button;
      Button launchScanButton = ViewBindings.findChildViewById(rootView, id);
      if (launchScanButton == null) {
        break missingId;
      }

      return new ActivityLaunchCardVerificationSheetCompleteBinding((CoordinatorLayout) rootView,
          civId, civIdLayout, civSecret, civSecretLayout, constraintLayout, launchScanButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
